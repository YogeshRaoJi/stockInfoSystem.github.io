{"version":3,"file":"default-node_modules_angular_material_fesm2015_checkbox_mjs-node_modules_angular_material_fes-8bae85.js","mappings":"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","sources":["./node_modules/@angular/cdk/fesm2015/layout.mjs","./node_modules/@angular/material/fesm2015/checkbox.mjs","./node_modules/@angular/material/fesm2015/progress-spinner.mjs","./node_modules/@angular/material/fesm2015/snack-bar.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { NgModule, Injectable } from '@angular/core';\nimport { coerceArray } from '@angular/cdk/coercion';\nimport { Subject, combineLatest, concat, Observable } from 'rxjs';\nimport { take, skip, debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass LayoutModule {\n}\nLayoutModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LayoutModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nLayoutModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LayoutModule });\nLayoutModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LayoutModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LayoutModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility = new Set();\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode;\n/** A utility for calling matchMedia queries. */\nclass MediaMatcher {\n    constructor(_platform) {\n        this._platform = _platform;\n        this._matchMedia =\n            this._platform.isBrowser && window.matchMedia\n                ? // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n                    // call it from a different scope.\n                    window.matchMedia.bind(window)\n                : noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     */\n    matchMedia(query) {\n        if (this._platform.WEBKIT || this._platform.BLINK) {\n            createEmptyStyleRule(query);\n        }\n        return this._matchMedia(query);\n    }\n}\nMediaMatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MediaMatcher, deps: [{ token: i1.Platform }], target: i0.ɵɵFactoryTarget.Injectable });\nMediaMatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MediaMatcher, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MediaMatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }]; } });\n/**\n * Creates an empty stylesheet that is used to work around browser inconsistencies related to\n * `matchMedia`. At the time of writing, it handles the following cases:\n * 1. On WebKit browsers, a media query has to have at least one rule in order for `matchMedia`\n * to fire. We work around it by declaring a dummy stylesheet with a `@media` declaration.\n * 2. In some cases Blink browsers will stop firing the `matchMedia` listener if none of the rules\n * inside the `@media` match existing elements on the page. We work around it by having one rule\n * targeting the `body`. See https://github.com/angular/components/issues/23546.\n */\nfunction createEmptyStyleRule(query) {\n    if (mediaQueriesForWebkitCompatibility.has(query)) {\n        return;\n    }\n    try {\n        if (!mediaQueryStyleNode) {\n            mediaQueryStyleNode = document.createElement('style');\n            mediaQueryStyleNode.setAttribute('type', 'text/css');\n            document.head.appendChild(mediaQueryStyleNode);\n        }\n        if (mediaQueryStyleNode.sheet) {\n            mediaQueryStyleNode.sheet.insertRule(`@media ${query} {body{ }}`, 0);\n            mediaQueriesForWebkitCompatibility.add(query);\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n}\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query) {\n    // Use `as any` here to avoid adding additional necessary properties for\n    // the noop matcher.\n    return {\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: () => { },\n        removeListener: () => { },\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Utility for checking the matching state of @media queries. */\nclass BreakpointObserver {\n    constructor(_mediaMatcher, _zone) {\n        this._mediaMatcher = _mediaMatcher;\n        this._zone = _zone;\n        /**  A map of all media queries currently being listened for. */\n        this._queries = new Map();\n        /** A subject for all other observables to takeUntil based on. */\n        this._destroySubject = new Subject();\n    }\n    /** Completes the active subject, signalling to all other observables to complete. */\n    ngOnDestroy() {\n        this._destroySubject.next();\n        this._destroySubject.complete();\n    }\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param value One or more media queries to check.\n     * @returns Whether any of the media queries match.\n     */\n    isMatched(value) {\n        const queries = splitQueries(coerceArray(value));\n        return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n    }\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param value One or more media queries to check.\n     * @returns A stream of matches for the given queries.\n     */\n    observe(value) {\n        const queries = splitQueries(coerceArray(value));\n        const observables = queries.map(query => this._registerQuery(query).observable);\n        let stateObservable = combineLatest(observables);\n        // Emit the first state immediately, and then debounce the subsequent emissions.\n        stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n        return stateObservable.pipe(map(breakpointStates => {\n            const response = {\n                matches: false,\n                breakpoints: {},\n            };\n            breakpointStates.forEach(({ matches, query }) => {\n                response.matches = response.matches || matches;\n                response.breakpoints[query] = matches;\n            });\n            return response;\n        }));\n    }\n    /** Registers a specific query to be listened for. */\n    _registerQuery(query) {\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n            return this._queries.get(query);\n        }\n        const mql = this._mediaMatcher.matchMedia(query);\n        // Create callback for match changes and add it is as a listener.\n        const queryObservable = new Observable((observer) => {\n            // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n            // back into the zone because matchMedia is only included in Zone.js by loading the\n            // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n            // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n            // patches it.\n            const handler = (e) => this._zone.run(() => observer.next(e));\n            mql.addListener(handler);\n            return () => {\n                mql.removeListener(handler);\n            };\n        }).pipe(startWith(mql), map(({ matches }) => ({ query, matches })), takeUntil(this._destroySubject));\n        // Add the MediaQueryList to the set of queries.\n        const output = { observable: queryObservable, mql };\n        this._queries.set(query, output);\n        return output;\n    }\n}\nBreakpointObserver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BreakpointObserver, deps: [{ token: MediaMatcher }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nBreakpointObserver.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BreakpointObserver, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BreakpointObserver, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: MediaMatcher }, { type: i0.NgZone }]; } });\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries) {\n    return queries\n        .map(query => query.split(','))\n        .reduce((a1, a2) => a1.concat(a2))\n        .map(query => query.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nconst Breakpoints = {\n    XSmall: '(max-width: 599.98px)',\n    Small: '(min-width: 600px) and (max-width: 959.98px)',\n    Medium: '(min-width: 960px) and (max-width: 1279.98px)',\n    Large: '(min-width: 1280px) and (max-width: 1919.98px)',\n    XLarge: '(min-width: 1920px)',\n    Handset: '(max-width: 599.98px) and (orientation: portrait), ' +\n        '(max-width: 959.98px) and (orientation: landscape)',\n    Tablet: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait), ' +\n        '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n    Web: '(min-width: 840px) and (orientation: portrait), ' +\n        '(min-width: 1280px) and (orientation: landscape)',\n    HandsetPortrait: '(max-width: 599.98px) and (orientation: portrait)',\n    TabletPortrait: '(min-width: 600px) and (max-width: 839.98px) and (orientation: portrait)',\n    WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n    HandsetLandscape: '(max-width: 959.98px) and (orientation: landscape)',\n    TabletLandscape: '(min-width: 960px) and (max-width: 1279.98px) and (orientation: landscape)',\n    WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreakpointObserver, Breakpoints, LayoutModule, MediaMatcher };\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Optional, Inject, Input, Output, ViewChild, Directive, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport * as i2 from '@angular/material/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRipple, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport * as i1 from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/observers';\nimport { ObserversModule } from '@angular/cdk/observers';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-checkbox`. */\nconst MAT_CHECKBOX_DEFAULT_OPTIONS = new InjectionToken('mat-checkbox-default-options', {\n    providedIn: 'root',\n    factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent',\n        clickAction: 'check-indeterminate',\n    };\n}\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n// Default checkbox configuration.\nconst defaults = MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY();\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatCheckbox),\n    multi: true,\n};\n/** Change event object emitted by MatCheckbox. */\nclass MatCheckboxChange {\n}\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nconst _MatCheckboxBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}))));\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\nclass MatCheckbox extends _MatCheckboxBase {\n    constructor(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex, _animationMode, _options) {\n        super(elementRef);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._focusMonitor = _focusMonitor;\n        this._ngZone = _ngZone;\n        this._animationMode = _animationMode;\n        this._options = _options;\n        /**\n         * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n         * take precedence so this may be omitted.\n         */\n        this.ariaLabel = '';\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._uniqueId = `mat-checkbox-${++nextUniqueId}`;\n        /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n        this.id = this._uniqueId;\n        /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n        this.labelPosition = 'after';\n        /** Name value will be applied to the input element if present */\n        this.name = null;\n        /** Event emitted when the checkbox's `checked` value changes. */\n        this.change = new EventEmitter();\n        /** Event emitted when the checkbox's `indeterminate` value changes. */\n        this.indeterminateChange = new EventEmitter();\n        /**\n         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n         * @docs-private\n         */\n        this._onTouched = () => { };\n        this._currentAnimationClass = '';\n        this._currentCheckState = 0 /* Init */;\n        this._controlValueAccessorChangeFn = () => { };\n        this._checked = false;\n        this._disabled = false;\n        this._indeterminate = false;\n        this._options = this._options || defaults;\n        this.color = this.defaultColor = this._options.color || defaults.color;\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n    /** Returns the unique id for the visual hidden input. */\n    get inputId() {\n        return `${this.id || this._uniqueId}-input`;\n    }\n    /** Whether the checkbox is required. */\n    get required() {\n        return this._required;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n            if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state change\n                // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n                // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n                // telling the form control it has been touched until the next tick.\n                Promise.resolve().then(() => {\n                    this._onTouched();\n                    this._changeDetectorRef.markForCheck();\n                });\n            }\n        });\n        this._syncIndeterminate(this._indeterminate);\n    }\n    // TODO: Delete next major revision.\n    ngAfterViewChecked() { }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Whether the checkbox is checked.\n     */\n    get checked() {\n        return this._checked;\n    }\n    set checked(value) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this.disabled) {\n            this._disabled = newValue;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    get indeterminate() {\n        return this._indeterminate;\n    }\n    set indeterminate(value) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = coerceBooleanProperty(value);\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(3 /* Indeterminate */);\n            }\n            else {\n                this._transitionCheckState(this.checked ? 1 /* Checked */ : 2 /* Unchecked */);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n        this._syncIndeterminate(this._indeterminate);\n    }\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n        // component will be only marked for check, but no actual change detection runs automatically.\n        // Instead of going back into the zone in order to trigger a change detection which causes\n        // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n        // an explicit change detection for the checkbox view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    _getAriaChecked() {\n        if (this.checked) {\n            return 'true';\n        }\n        return this.indeterminate ? 'mixed' : 'false';\n    }\n    _transitionCheckState(newState) {\n        let oldState = this._currentCheckState;\n        let element = this._elementRef.nativeElement;\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n        this._currentCheckState = newState;\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n            // Remove the animation class to avoid animation when the checkbox is moved between containers\n            const animationClass = this._currentAnimationClass;\n            this._ngZone.runOutsideAngular(() => {\n                setTimeout(() => {\n                    element.classList.remove(animationClass);\n                }, 1000);\n            });\n        }\n    }\n    _emitChangeEvent() {\n        const event = new MatCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n        // Assigning the value again here is redundant, but we have to do it in case it was\n        // changed inside the `change` listener which will cause the input to be out of sync.\n        if (this._inputElement) {\n            this._inputElement.nativeElement.checked = this.checked;\n        }\n    }\n    /** Toggles the `checked` state of the checkbox. */\n    toggle() {\n        this.checked = !this.checked;\n    }\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event) {\n        var _a;\n        const clickAction = (_a = this._options) === null || _a === void 0 ? void 0 : _a.clickAction;\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && clickAction !== 'check') {\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n            this.toggle();\n            this._transitionCheckState(this._checked ? 1 /* Checked */ : 2 /* Unchecked */);\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        }\n        else if (!this.disabled && clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mat-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n    /** Focuses the checkbox. */\n    focus(origin, options) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    _onInteractionEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n    _getAnimationClassForCheckStateTransition(oldState, newState) {\n        // Don't transition if animations are disabled.\n        if (this._animationMode === 'NoopAnimations') {\n            return '';\n        }\n        let animSuffix = '';\n        switch (oldState) {\n            case 0 /* Init */:\n                // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n                // [checked] bound to it.\n                if (newState === 1 /* Checked */) {\n                    animSuffix = 'unchecked-checked';\n                }\n                else if (newState == 3 /* Indeterminate */) {\n                    animSuffix = 'unchecked-indeterminate';\n                }\n                else {\n                    return '';\n                }\n                break;\n            case 2 /* Unchecked */:\n                animSuffix =\n                    newState === 1 /* Checked */\n                        ? 'unchecked-checked'\n                        : 'unchecked-indeterminate';\n                break;\n            case 1 /* Checked */:\n                animSuffix =\n                    newState === 2 /* Unchecked */\n                        ? 'checked-unchecked'\n                        : 'checked-indeterminate';\n                break;\n            case 3 /* Indeterminate */:\n                animSuffix =\n                    newState === 1 /* Checked */\n                        ? 'indeterminate-checked'\n                        : 'indeterminate-unchecked';\n                break;\n        }\n        return `mat-checkbox-anim-${animSuffix}`;\n    }\n    /**\n     * Syncs the indeterminate value with the checkbox DOM node.\n     *\n     * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n     * property is supported on an element boils down to `if (propName in element)`. Domino's\n     * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n     * server-side rendering.\n     */\n    _syncIndeterminate(value) {\n        const nativeCheckbox = this._inputElement;\n        if (nativeCheckbox) {\n            nativeCheckbox.nativeElement.indeterminate = value;\n        }\n    }\n}\nMatCheckbox.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatCheckbox, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.FocusMonitor }, { token: i0.NgZone }, { token: 'tabindex', attribute: true }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_CHECKBOX_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatCheckbox.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: MatCheckbox, selector: \"mat-checkbox\", inputs: { disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], id: \"id\", required: \"required\", labelPosition: \"labelPosition\", name: \"name\", value: \"value\", checked: \"checked\", disabled: \"disabled\", indeterminate: \"indeterminate\" }, outputs: { change: \"change\", indeterminateChange: \"indeterminateChange\" }, host: { properties: { \"id\": \"id\", \"attr.tabindex\": \"null\", \"class.mat-checkbox-indeterminate\": \"indeterminate\", \"class.mat-checkbox-checked\": \"checked\", \"class.mat-checkbox-disabled\": \"disabled\", \"class.mat-checkbox-label-before\": \"labelPosition == \\\"before\\\"\", \"class._mat-animation-noopable\": \"_animationMode === 'NoopAnimations'\" }, classAttribute: \"mat-checkbox\" }, providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR], viewQueries: [{ propertyName: \"_inputElement\", first: true, predicate: [\"input\"], descendants: true }, { propertyName: \"ripple\", first: true, predicate: MatRipple, descendants: true }], exportAs: [\"matCheckbox\"], usesInheritance: true, ngImport: i0, template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label>\\n  <span class=\\\"mat-checkbox-inner-container\\\"\\n       [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\">\\n    <input #input\\n           class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [checked]=\\\"checked\\\"\\n           [attr.value]=\\\"value\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [attr.aria-label]=\\\"ariaLabel || null\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-checked]=\\\"_getAriaChecked()\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onInteractionEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n    <span matRipple class=\\\"mat-checkbox-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: _animationMode === 'NoopAnimations' ? 0 : 150}\\\">\\n      <span class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></span>\\n    </span>\\n    <span class=\\\"mat-checkbox-frame\\\"></span>\\n    <span class=\\\"mat-checkbox-background\\\">\\n      <svg version=\\\"1.1\\\"\\n           focusable=\\\"false\\\"\\n           class=\\\"mat-checkbox-checkmark\\\"\\n           viewBox=\\\"0 0 24 24\\\"\\n           xml:space=\\\"preserve\\\"\\n           aria-hidden=\\\"true\\\">\\n        <path class=\\\"mat-checkbox-checkmark-path\\\"\\n              fill=\\\"none\\\"\\n              stroke=\\\"white\\\"\\n              d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/>\\n      </svg>\\n      <!-- Element for rendering the indeterminate state checkbox. -->\\n      <span class=\\\"mat-checkbox-mixedmark\\\"></span>\\n    </span>\\n  </span>\\n  <span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\", styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{display:inline-block;transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.cdk-high-contrast-active .mat-checkbox.cdk-keyboard-focused .mat-checkbox-ripple{outline:solid 3px}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{display:block;width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}\\n\"], directives: [{ type: i2.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }, { type: i3.CdkObserveContent, selector: \"[cdkObserveContent]\", inputs: [\"cdkObserveContentDisabled\", \"debounce\"], outputs: [\"cdkObserveContent\"], exportAs: [\"cdkObserveContent\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatCheckbox, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-checkbox', exportAs: 'matCheckbox', host: {\n                        'class': 'mat-checkbox',\n                        '[id]': 'id',\n                        '[attr.tabindex]': 'null',\n                        '[class.mat-checkbox-indeterminate]': 'indeterminate',\n                        '[class.mat-checkbox-checked]': 'checked',\n                        '[class.mat-checkbox-disabled]': 'disabled',\n                        '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n                        '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n                    }, providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR], inputs: ['disableRipple', 'color', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label>\\n  <span class=\\\"mat-checkbox-inner-container\\\"\\n       [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\">\\n    <input #input\\n           class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [checked]=\\\"checked\\\"\\n           [attr.value]=\\\"value\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [attr.aria-label]=\\\"ariaLabel || null\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-checked]=\\\"_getAriaChecked()\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onInteractionEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n    <span matRipple class=\\\"mat-checkbox-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: _animationMode === 'NoopAnimations' ? 0 : 150}\\\">\\n      <span class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></span>\\n    </span>\\n    <span class=\\\"mat-checkbox-frame\\\"></span>\\n    <span class=\\\"mat-checkbox-background\\\">\\n      <svg version=\\\"1.1\\\"\\n           focusable=\\\"false\\\"\\n           class=\\\"mat-checkbox-checkmark\\\"\\n           viewBox=\\\"0 0 24 24\\\"\\n           xml:space=\\\"preserve\\\"\\n           aria-hidden=\\\"true\\\">\\n        <path class=\\\"mat-checkbox-checkmark-path\\\"\\n              fill=\\\"none\\\"\\n              stroke=\\\"white\\\"\\n              d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/>\\n      </svg>\\n      <!-- Element for rendering the indeterminate state checkbox. -->\\n      <span class=\\\"mat-checkbox-mixedmark\\\"></span>\\n    </span>\\n  </span>\\n  <span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\", styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{display:inline-block;transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.cdk-high-contrast-active .mat-checkbox.cdk-keyboard-focused .mat-checkbox-ripple{outline:solid 3px}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{display:block;width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.FocusMonitor }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['tabindex']\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_CHECKBOX_DEFAULT_OPTIONS]\n                    }] }];\n    }, propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], id: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], labelPosition: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }], indeterminateChange: [{\n                type: Output\n            }], value: [{\n                type: Input\n            }], _inputElement: [{\n                type: ViewChild,\n                args: ['input']\n            }], ripple: [{\n                type: ViewChild,\n                args: [MatRipple]\n            }], checked: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], indeterminate: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n    multi: true,\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\nclass MatCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\nMatCheckboxRequiredValidator.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatCheckboxRequiredValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatCheckboxRequiredValidator.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: MatCheckboxRequiredValidator, selector: \"mat-checkbox[required][formControlName],\\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]\", providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatCheckboxRequiredValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n                    providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based checkbox implementations. */\nclass _MatCheckboxRequiredValidatorModule {\n}\n_MatCheckboxRequiredValidatorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n_MatCheckboxRequiredValidatorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule, declarations: [MatCheckboxRequiredValidator], exports: [MatCheckboxRequiredValidator] });\n_MatCheckboxRequiredValidatorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [MatCheckboxRequiredValidator],\n                    declarations: [MatCheckboxRequiredValidator],\n                }]\n        }] });\nclass MatCheckboxModule {\n}\nMatCheckboxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatCheckboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatCheckboxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatCheckboxModule, declarations: [MatCheckbox], imports: [MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule], exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule] });\nMatCheckboxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatCheckboxModule, imports: [[MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule], MatCommonModule, _MatCheckboxRequiredValidatorModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatCheckboxModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule],\n                    exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n                    declarations: [MatCheckbox],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, MAT_CHECKBOX_DEFAULT_OPTIONS, MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckbox, MatCheckboxChange, MatCheckboxModule, MatCheckboxRequiredValidator, _MatCheckboxRequiredValidatorModule };\n","import * as i0 from '@angular/core';\nimport { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Inject, Input, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getShadowRoot } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nconst _MatProgressSpinnerBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}, 'primary');\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nconst MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new InjectionToken('mat-progress-spinner-default-options', {\n    providedIn: 'root',\n    factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\n    return { diameter: BASE_SIZE };\n}\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n/**\n * `<mat-progress-spinner>` component.\n */\nclass MatProgressSpinner extends _MatProgressSpinnerBase {\n    constructor(elementRef, \n    /**\n     * @deprecated `_platform` parameter no longer being used.\n     * @breaking-change 14.0.0\n     */\n    _platform, _document, animationMode, defaults) {\n        super(elementRef);\n        this._document = _document;\n        this._diameter = BASE_SIZE;\n        this._value = 0;\n        /** Mode of the progress circle */\n        this.mode = 'determinate';\n        const trackedDiameters = MatProgressSpinner._diameters;\n        this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n        // The base size is already inserted via the component's structural styles. We still\n        // need to track it so we don't end up adding the same styles again.\n        if (!trackedDiameters.has(_document.head)) {\n            trackedDiameters.set(_document.head, new Set([BASE_SIZE]));\n        }\n        this._noopAnimations =\n            animationMode === 'NoopAnimations' && !!defaults && !defaults._forceAnimations;\n        if (defaults) {\n            if (defaults.diameter) {\n                this.diameter = defaults.diameter;\n            }\n            if (defaults.strokeWidth) {\n                this.strokeWidth = defaults.strokeWidth;\n            }\n        }\n    }\n    /** The diameter of the progress spinner (will set width and height of svg). */\n    get diameter() {\n        return this._diameter;\n    }\n    set diameter(size) {\n        this._diameter = coerceNumberProperty(size);\n        this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n        // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n        if (this._styleRoot) {\n            this._attachStyleNode();\n        }\n    }\n    /** Stroke width of the progress spinner. */\n    get strokeWidth() {\n        return this._strokeWidth || this.diameter / 10;\n    }\n    set strokeWidth(value) {\n        this._strokeWidth = coerceNumberProperty(value);\n    }\n    /** Value of the progress circle. */\n    get value() {\n        return this.mode === 'determinate' ? this._value : 0;\n    }\n    set value(newValue) {\n        this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n    }\n    ngOnInit() {\n        const element = this._elementRef.nativeElement;\n        // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n        // Angular seems to create the element outside the shadow root and then moves it inside, if the\n        // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n        this._styleRoot = _getShadowRoot(element) || this._document.head;\n        this._attachStyleNode();\n        element.classList.add('mat-progress-spinner-indeterminate-animation');\n    }\n    /** The radius of the spinner, adjusted for stroke width. */\n    _getCircleRadius() {\n        return (this.diameter - BASE_STROKE_WIDTH) / 2;\n    }\n    /** The view box of the spinner's svg element. */\n    _getViewBox() {\n        const viewBox = this._getCircleRadius() * 2 + this.strokeWidth;\n        return `0 0 ${viewBox} ${viewBox}`;\n    }\n    /** The stroke circumference of the svg circle. */\n    _getStrokeCircumference() {\n        return 2 * Math.PI * this._getCircleRadius();\n    }\n    /** The dash offset of the svg circle. */\n    _getStrokeDashOffset() {\n        if (this.mode === 'determinate') {\n            return (this._getStrokeCircumference() * (100 - this._value)) / 100;\n        }\n        return null;\n    }\n    /** Stroke width of the circle in percent. */\n    _getCircleStrokeWidth() {\n        return (this.strokeWidth / this.diameter) * 100;\n    }\n    /** Dynamically generates a style tag containing the correct animation for this diameter. */\n    _attachStyleNode() {\n        const styleRoot = this._styleRoot;\n        const currentDiameter = this._diameter;\n        const diameters = MatProgressSpinner._diameters;\n        let diametersForElement = diameters.get(styleRoot);\n        if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n            const styleTag = this._document.createElement('style');\n            styleTag.setAttribute('mat-spinner-animation', this._spinnerAnimationLabel);\n            styleTag.textContent = this._getAnimationText();\n            styleRoot.appendChild(styleTag);\n            if (!diametersForElement) {\n                diametersForElement = new Set();\n                diameters.set(styleRoot, diametersForElement);\n            }\n            diametersForElement.add(currentDiameter);\n        }\n    }\n    /** Generates animation styles adjusted for the spinner's diameter. */\n    _getAnimationText() {\n        const strokeCircumference = this._getStrokeCircumference();\n        return (INDETERMINATE_ANIMATION_TEMPLATE\n            // Animation should begin at 5% and end at 80%\n            .replace(/START_VALUE/g, `${0.95 * strokeCircumference}`)\n            .replace(/END_VALUE/g, `${0.2 * strokeCircumference}`)\n            .replace(/DIAMETER/g, `${this._spinnerAnimationLabel}`));\n    }\n    /** Returns the circle diameter formatted for use with the animation-name CSS property. */\n    _getSpinnerAnimationLabel() {\n        // The string of a float point number will include a period ‘.’ character,\n        // which is not valid for a CSS animation-name.\n        return this.diameter.toString().replace('.', '_');\n    }\n}\n/**\n * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n * We need to keep track of which elements the diameters were attached to, because for\n * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n * than the document head.\n */\nMatProgressSpinner._diameters = new WeakMap();\nMatProgressSpinner.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatProgressSpinner, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: DOCUMENT, optional: true }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Component });\nMatProgressSpinner.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: MatProgressSpinner, selector: \"mat-progress-spinner\", inputs: { color: \"color\", diameter: \"diameter\", strokeWidth: \"strokeWidth\", mode: \"mode\", value: \"value\" }, host: { attributes: { \"role\": \"progressbar\", \"tabindex\": \"-1\" }, properties: { \"class._mat-animation-noopable\": \"_noopAnimations\", \"style.width.px\": \"diameter\", \"style.height.px\": \"diameter\", \"attr.aria-valuemin\": \"mode === \\\"determinate\\\" ? 0 : null\", \"attr.aria-valuemax\": \"mode === \\\"determinate\\\" ? 100 : null\", \"attr.aria-valuenow\": \"mode === \\\"determinate\\\" ? value : null\", \"attr.mode\": \"mode\" }, classAttribute: \"mat-progress-spinner\" }, exportAs: [\"matProgressSpinner\"], usesInheritance: true, ngImport: i0, template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n</svg>\\n\", styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:CanvasText}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}\\n\"], directives: [{ type: i2.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { type: i2.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatProgressSpinner, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-progress-spinner', exportAs: 'matProgressSpinner', host: {\n                        'role': 'progressbar',\n                        'class': 'mat-progress-spinner',\n                        // set tab index to -1 so screen readers will read the aria-label\n                        // Note: there is a known issue with JAWS that does not read progressbar aria labels on FireFox\n                        'tabindex': '-1',\n                        '[class._mat-animation-noopable]': `_noopAnimations`,\n                        '[style.width.px]': 'diameter',\n                        '[style.height.px]': 'diameter',\n                        '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n                        '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n                        '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n                        '[attr.mode]': 'mode',\n                    }, inputs: ['color'], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n</svg>\\n\", styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:CanvasText}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.Platform }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n                    }] }];\n    }, propDecorators: { diameter: [{\n                type: Input\n            }], strokeWidth: [{\n                type: Input\n            }], mode: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }] } });\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\nclass MatSpinner extends MatProgressSpinner {\n    constructor(elementRef, platform, document, animationMode, defaults) {\n        super(elementRef, platform, document, animationMode, defaults);\n        this.mode = 'indeterminate';\n    }\n}\nMatSpinner.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSpinner, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: DOCUMENT, optional: true }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Component });\nMatSpinner.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: MatSpinner, selector: \"mat-spinner\", inputs: { color: \"color\" }, host: { attributes: { \"role\": \"progressbar\", \"mode\": \"indeterminate\" }, properties: { \"class._mat-animation-noopable\": \"_noopAnimations\", \"style.width.px\": \"diameter\", \"style.height.px\": \"diameter\" }, classAttribute: \"mat-spinner mat-progress-spinner\" }, usesInheritance: true, ngImport: i0, template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n</svg>\\n\", styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:CanvasText}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}\\n\"], directives: [{ type: i2.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { type: i2.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSpinner, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-spinner', host: {\n                        'role': 'progressbar',\n                        'mode': 'indeterminate',\n                        'class': 'mat-spinner mat-progress-spinner',\n                        '[class._mat-animation-noopable]': `_noopAnimations`,\n                        '[style.width.px]': 'diameter',\n                        '[style.height.px]': 'diameter',\n                    }, inputs: ['color'], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n</svg>\\n\", styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:CanvasText}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.Platform }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatProgressSpinnerModule {\n}\nMatProgressSpinnerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatProgressSpinnerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatProgressSpinnerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatProgressSpinnerModule, declarations: [MatProgressSpinner, MatSpinner], imports: [MatCommonModule, CommonModule], exports: [MatProgressSpinner, MatSpinner, MatCommonModule] });\nMatProgressSpinnerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatProgressSpinnerModule, imports: [[MatCommonModule, CommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatProgressSpinnerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, CommonModule],\n                    exports: [MatProgressSpinner, MatSpinner, MatCommonModule],\n                    declarations: [MatProgressSpinner, MatSpinner],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinner, MatProgressSpinnerModule, MatSpinner };\n","import * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayModule, OverlayConfig } from '@angular/cdk/overlay';\nimport * as i3$1 from '@angular/cdk/portal';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, ViewChild, NgModule, Injector, TemplateRef, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i1 from '@angular/cdk/platform';\nimport * as i3$2 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport * as i2$1 from '@angular/cdk/a11y';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe(() => this.dismiss());\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SimpleSnackBar, deps: [{ token: MatSnackBarRef }, { token: MAT_SNACK_BAR_DATA }], target: i0.ɵɵFactoryTarget.Component });\nSimpleSnackBar.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SimpleSnackBar, selector: \"simple-snack-bar\", host: { classAttribute: \"mat-simple-snackbar\" }, ngImport: i0, template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"], components: [{ type: i2.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], directives: [{ type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SimpleSnackBar, decorators: [{\n            type: Component,\n            args: [{ selector: 'simple-snack-bar', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'class': 'mat-simple-snackbar',\n                    }, template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\", styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_SNACK_BAR_DATA]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0,\n        }))),\n    ]),\n};\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, _platform, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._platform = _platform;\n        this.snackBarConfig = snackBarConfig;\n        /** The number of milliseconds to wait before announcing the snack bar's content. */\n        this._announceDelay = 150;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has announced to screen readers. */\n        this._onAnnounce = new Subject();\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        // Use aria-live rather than a live role like 'alert' or 'status'\n        // because NVDA and JAWS have show inconsistent behavior with live roles.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._live = 'assertive';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._live = 'off';\n        }\n        else {\n            this._live = 'polite';\n        }\n        // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n        // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n        if (this._platform.FIREFOX) {\n            if (this._live === 'polite') {\n                this._role = 'status';\n            }\n            if (this._live === 'assertive') {\n                this._role = 'alert';\n            }\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n            this._screenReaderAnnounce();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        // Mark this element with an 'exit' attribute to indicate that the snackbar has\n        // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n        // test harness.\n        this._elementRef.nativeElement.setAttribute('mat-exit', '');\n        // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n        // long enough to visually read it either, so clear the timeout for announcing.\n        clearTimeout(this._announceTimeoutId);\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._onExit.next();\n            this._onExit.complete();\n        });\n    }\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n    _applySnackBarClasses() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n    /**\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\n     * announce it.\n     */\n    _screenReaderAnnounce() {\n        if (!this._announceTimeoutId) {\n            this._ngZone.runOutsideAngular(() => {\n                this._announceTimeoutId = setTimeout(() => {\n                    const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n                    const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n                    if (inertElement && liveElement) {\n                        // If an element in the snack bar content is focused before being moved\n                        // track it and restore focus after moving to the live region.\n                        let focusedElement = null;\n                        if (this._platform.isBrowser &&\n                            document.activeElement instanceof HTMLElement &&\n                            inertElement.contains(document.activeElement)) {\n                            focusedElement = document.activeElement;\n                        }\n                        inertElement.removeAttribute('aria-hidden');\n                        liveElement.appendChild(inertElement);\n                        focusedElement === null || focusedElement === void 0 ? void 0 : focusedElement.focus();\n                        this._onAnnounce.next();\n                        this._onAnnounce.complete();\n                    }\n                }, this._announceDelay);\n            });\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSnackBarContainer, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.Platform }, { token: MatSnackBarConfig }], target: i0.ɵɵFactoryTarget.Component });\nMatSnackBarContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: MatSnackBarContainer, selector: \"snack-bar-container\", host: { listeners: { \"@state.done\": \"onAnimationEnd($event)\" }, properties: { \"@state\": \"_animationState\" }, classAttribute: \"mat-snack-bar-container\" }, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"], directives: [{ type: i3$1.CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matSnackBarAnimations.snackBarState], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSnackBarContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'snack-bar-container', changeDetection: ChangeDetectionStrategy.Default, encapsulation: ViewEncapsulation.None, animations: [matSnackBarAnimations.snackBarState], host: {\n                        'class': 'mat-snack-bar-container',\n                        '[@state]': '_animationState',\n                        '(@state.done)': 'onAnimationEnd($event)',\n                    }, template: \"<!-- Initially holds the snack bar content, will be empty after announcing to screen readers. -->\\n<div aria-hidden=\\\"true\\\">\\n  <ng-template cdkPortalOutlet></ng-template>\\n</div>\\n\\n<!-- Will receive the snack bar content from the non-live div, move will happen a short delay after opening -->\\n<div [attr.aria-live]=\\\"_live\\\" [attr.role]=\\\"_role\\\"></div>\\n\", styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.Platform }, { type: MatSnackBarConfig }]; }, propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSnackBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSnackBarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSnackBarModule, declarations: [MatSnackBarContainer, SimpleSnackBar], imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], exports: [MatSnackBarContainer, MatCommonModule] });\nMatSnackBarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSnackBarModule, imports: [[OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSnackBarModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, CommonModule, MatButtonModule, MatCommonModule],\n                    exports: [MatSnackBarContainer, MatCommonModule],\n                    declarations: [MatSnackBarContainer, SimpleSnackBar],\n                }]\n        }] });\n\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n        /** The component that should be rendered as the snack bar's simple component. */\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        /** The container component that attaches the provided template or component. */\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        /** The CSS class to apply for handset mode. */\n        this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = Object.assign(Object.assign({}, this._defaultConfig), config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }],\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef,\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver\n            .observe(Breakpoints.HandsetPortrait)\n            .pipe(takeUntil(overlayRef.detachments()))\n            .subscribe(state => {\n            overlayRef.overlayElement.classList.toggle(this.handsetCssClass, state.matches);\n        });\n        if (config.announcementMessage) {\n            // Wait until the snack bar contents have been announced then deliver this message.\n            container._onAnnounce.subscribe(() => {\n                this._live.announce(config.announcementMessage, config.politeness);\n            });\n        }\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl);\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data },\n            ],\n        });\n    }\n}\nMatSnackBar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSnackBar, deps: [{ token: i1$1.Overlay }, { token: i2$1.LiveAnnouncer }, { token: i0.Injector }, { token: i3$2.BreakpointObserver }, { token: MatSnackBar, optional: true, skipSelf: true }, { token: MAT_SNACK_BAR_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });\nMatSnackBar.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSnackBar, providedIn: MatSnackBarModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: MatSnackBar, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: MatSnackBarModule }]\n        }], ctorParameters: function () {\n        return [{ type: i1$1.Overlay }, { type: i2$1.LiveAnnouncer }, { type: i0.Injector }, { type: i3$2.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }] }, { type: MatSnackBarConfig, decorators: [{\n                        type: Inject,\n                        args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n"],"names":["i0","NgModule","Injectable","coerceArray","Subject","combineLatest","concat","Observable","take","skip","debounceTime","map","startWith","takeUntil","i1","LayoutModule","ɵfac","ɵmod","ɵinj","type","args","mediaQueriesForWebkitCompatibility","Set","mediaQueryStyleNode","MediaMatcher","constructor","_platform","_matchMedia","isBrowser","window","matchMedia","bind","noopMatchMedia","query","WEBKIT","BLINK","createEmptyStyleRule","Platform","ɵprov","providedIn","has","document","createElement","setAttribute","head","appendChild","sheet","insertRule","add","e","console","error","matches","media","addListener","removeListener","BreakpointObserver","_mediaMatcher","_zone","_queries","Map","_destroySubject","ngOnDestroy","next","complete","isMatched","value","queries","splitQueries","some","mediaQuery","_registerQuery","mql","observe","observables","observable","stateObservable","pipe","breakpointStates","response","breakpoints","forEach","get","queryObservable","observer","handler","run","output","set","NgZone","split","reduce","a1","a2","trim","Breakpoints","XSmall","Small","Medium","Large","XLarge","Handset","Tablet","Web","HandsetPortrait","TabletPortrait","WebPortrait","HandsetLandscape","TabletLandscape","WebLandscape","coerceBooleanProperty","InjectionToken","forwardRef","EventEmitter","Component","ViewEncapsulation","ChangeDetectionStrategy","Attribute","Optional","Inject","Input","Output","ViewChild","Directive","NG_VALUE_ACCESSOR","NG_VALIDATORS","CheckboxRequiredValidator","i2","mixinTabIndex","mixinColor","mixinDisableRipple","mixinDisabled","MatRipple","MatRippleModule","MatCommonModule","ANIMATION_MODULE_TYPE","i3","ObserversModule","MAT_CHECKBOX_DEFAULT_OPTIONS","factory","MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY","color","clickAction","nextUniqueId","defaults","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","useExisting","MatCheckbox","multi","MatCheckboxChange","_MatCheckboxBase","_elementRef","elementRef","_changeDetectorRef","_focusMonitor","_ngZone","tabIndex","_animationMode","_options","ariaLabel","ariaLabelledby","_uniqueId","id","labelPosition","name","change","indeterminateChange","_onTouched","_currentAnimationClass","_currentCheckState","_controlValueAccessorChangeFn","_checked","_disabled","_indeterminate","defaultColor","parseInt","inputId","required","_required","ngAfterViewInit","monitor","subscribe","focusOrigin","Promise","resolve","then","markForCheck","_syncIndeterminate","ngAfterViewChecked","stopMonitoring","checked","disabled","newValue","indeterminate","changed","_transitionCheckState","emit","_isRippleDisabled","disableRipple","_onLabelTextChange","detectChanges","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_getAriaChecked","newState","oldState","element","nativeElement","length","classList","remove","_getAnimationClassForCheckStateTransition","animationClass","runOutsideAngular","setTimeout","_emitChangeEvent","event","source","_inputElement","toggle","_onInputClick","_a","stopPropagation","focus","origin","options","focusVia","_onInteractionEvent","animSuffix","nativeCheckbox","ElementRef","ChangeDetectorRef","FocusMonitor","ɵcmp","CdkObserveContent","selector","exportAs","host","providers","inputs","encapsulation","None","changeDetection","OnPush","template","styles","undefined","decorators","ariaDescribedby","ripple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","ɵdir","_MatCheckboxRequiredValidatorModule","exports","declarations","MatCheckboxModule","imports","DOCUMENT","CommonModule","coerceNumberProperty","_getShadowRoot","BASE_SIZE","BASE_STROKE_WIDTH","_MatProgressSpinnerBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","diameter","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","_document","animationMode","_diameter","_value","mode","trackedDiameters","_diameters","_spinnerAnimationLabel","_getSpinnerAnimationLabel","_noopAnimations","_forceAnimations","strokeWidth","size","_styleRoot","_attachStyleNode","_strokeWidth","Math","max","min","ngOnInit","_getCircleRadius","_getViewBox","viewBox","_getStrokeCircumference","PI","_getStrokeDashOffset","_getCircleStrokeWidth","styleRoot","currentDiameter","diameters","diametersForElement","styleTag","textContent","_getAnimationText","strokeCircumference","replace","toString","WeakMap","NgSwitch","NgSwitchCase","MatSpinner","platform","MatProgressSpinnerModule","i1$1","OverlayModule","OverlayConfig","i3$1","BasePortalOutlet","CdkPortalOutlet","PortalModule","ComponentPortal","TemplatePortal","Injector","TemplateRef","SkipSelf","MatButtonModule","trigger","state","style","transition","animate","i3$2","i2$1","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","duration","data","horizontalPosition","verticalPosition","MAX_TIMEOUT","pow","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","_open","dispose","dismissedByAction","afterDismissed","afterOpened","_onEnter","SimpleSnackBar","snackBarRef","action","hasAction","NgIf","MatButton","matSnackBarAnimations","snackBarState","transform","opacity","MatSnackBarContainer","snackBarConfig","_announceDelay","_destroyed","_onAnnounce","_animationState","attachDomPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","_live","FIREFOX","_role","attachComponentPortal","attachTemplatePortal","onAnimationEnd","fromState","toState","_completeExit","onEnter","enter","_screenReaderAnnounce","_announceTimeoutId","onMicrotaskEmpty","panelClasses","panelClass","Array","isArray","cssClass","hasAttached","ngDevMode","Error","inertElement","querySelector","liveElement","focusedElement","activeElement","HTMLElement","contains","removeAttribute","Default","animations","static","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","simpleSnackBarComponent","snackBarContainerComponent","handsetCssClass","_openedSnackBarRef","parent","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","Object","assign","_attachSnackBarContainer","overlayRef","userInjector","viewContainerRef","injector","create","useValue","containerPortal","containerRef","attach","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","detachments","overlayElement","announce","_animateSnackBar","clear","overlayConfig","direction","positionStrategy","position","global","isRtl","isLeft","isRight","left","right","centerHorizontally","top","bottom","Overlay","LiveAnnouncer"],"sourceRoot":"webpack:///"}